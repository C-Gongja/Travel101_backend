	public TripDto putUpdatedTrip(String tripUid, TripRequest updatedTrip) {
		// Users user = getCurrentUser(); // 현재 로그인한 사용자 가져오기
		// (이 부분은 실제 인증 로직에 따라 구현해야 합니다.)
		Users user = new Users(); // 임시 사용자 객체 (실제 구현 시 삭제)
		user.setUid("tempUserUid"); // 임시 사용자 UID 설정
		user.setTotalTripDays(10); // 임시 데이터
		user.setTotalTrips(2); // 임시 데이터

		Trip trip = tripRepository.findByTripUid(tripUid)
				.orElseThrow(() -> new RuntimeException("putUpdatedTrip: Trip not found with UID " + tripUid));

		// 소유자 확인 (예시)
		if (!trip.getUid().equals(user.getUid())) { // trip.getUid()가 Users 객체라면 trip.getUid().getUid()
			throw new RuntimeException("User is not the owner of this trip.");
		}

		Set<Country> countries = updatedTrip.getCountries().stream()
				.map(codeDto -> countryRepository.findByIso2(codeDto.getIso2())
						.orElseThrow(() -> new RuntimeException("Country not found: " + codeDto.getIso2())))
				.collect(Collectors.toSet());

		// 기본 Trip 정보 업데이트
		trip.setName(updatedTrip.getName());
		trip.setStartDate(updatedTrip.getStartDate());
		trip.setEndDate(updatedTrip.getEndDate());
		trip.setCountries(countries);
		trip.setScripted(0L); // 스크립트 상태는 업데이트 시 0으로 초기화? (로직 확인 필요)

		// 완료된 여행 관련 사용자 통계 업데이트 로직 (기존과 동일)
		if (trip.isCompleted()) {
			int currentTripDays = (int) ChronoUnit.DAYS.between(trip.getStartDate(), trip.getEndDate()) + 1;
			user.setTotalTripDays(Math.max(0, user.getTotalTripDays() - currentTripDays));
			user.setTotalTrips(Math.max(0, user.getTotalTrips() - 1));
		}

		LocalDate today = LocalDate.now();
		if (updatedTrip.getEndDate() != null && !updatedTrip.getEndDate().isBefore(today.plusDays(1))) { // 완료 기준 변경: 오늘 날짜
																																																			// 포함 이거나 미래
			// 이 로직은 `trip.setCompleted(true)`로직이 `updatedTrip`의 `endDate`를 기반으로 변경되었는지 확인하는
			// 부분입니다.
			// 기존 `trip.isCompleted()`가 true 였고 `updatedTrip.isCompleted()`가 false가 되면 이 로직은
			// 실행되지 않습니다.
			// `updatedTrip`의 `endDate`와 현재 날짜를 비교하여 `completed` 상태를 결정하고 사용자 통계를 업데이트하는 것이
			// 더 명확합니다.
			trip.setCompleted(false); // 일단 false로 설정하고 아래에서 다시 판단
		} else {
			// Updated trip's end date is today or in the past
			// If the trip was not completed before, or if its end date is still in the
			// past,
			// mark as completed and update user stats.
			if (!trip.isCompleted()
					|| (updatedTrip.getEndDate() != null && updatedTrip.getEndDate().isBefore(today.plusDays(1)))) {
				int updatedTripDays = (int) ChronoUnit.DAYS.between(updatedTrip.getStartDate(), updatedTrip.getEndDate()) + 1;
				user.setTotalTripDays(user.getTotalTripDays() + updatedTripDays);
				user.setTotalTrips(user.getTotalTrips() + 1);
				trip.setCompleted(true);
			}
		}

		// Days 및 Locations 업데이트 로직
		Map<Integer, Days> existingDaysMap = trip.getDays().stream()
				.collect(Collectors.toMap(Days::getNumber, day -> day));
		List<Days> finalDaysToSave = new ArrayList<>(); // 최종적으로 저장할 Day 리스트

		Set<Long> mediaIdsToKeep = new HashSet<>(); // 이번 업데이트에서 유지될 미디어 ID (S3TripMedia.id)

		for (DaysDto dayDto : updatedTrip.getDays()) {
			Days day = existingDaysMap.getOrDefault(dayDto.getNumber(), new Days());
			day.setTrip(trip);
			day.setNumber(dayDto.getNumber());

			Map<Integer, Locations> existingLocationsMap = day.getLocations().stream()
					.collect(Collectors.toMap(Locations::getNumber, loc -> loc));
			List<Locations> finalLocationsToSave = new ArrayList<>(); // 최종적으로 저장할 Location 리스트

			for (LocationDto locDto : dayDto.getLocations()) {
				Locations location = existingLocationsMap.getOrDefault(locDto.getNumber(), new Locations());
				location.setDay(day);
				location.setNumber(locDto.getNumber());
				location.setName(locDto.getName());
				location.setLongitude(locDto.getLongitude());
				location.setLatitude(locDto.getLatitude());
				location.setDescription(locDto.getDescription());
				location.setCountryIso2(locDto.getCountryIso2());
				finalLocationsToSave.add(location);
				existingLocationsMap.remove(locDto.getNumber());

				// --- Media (S3 Key) 관리 로직 ---
				// 해당 Location에 대한 기존 미디어들을 가져옵니다.
				List<S3TripMedia> existingMedia = s3TripMediaRepository
						.findByTripIdAndDayNumberAndLocationNumberAndUsageType(
								tripUid, dayDto.getNumber(), locDto.getNumber(), MediaUsageType.LOCATION_MEDIA);
				Set<String> existingS3Keys = existingMedia.stream()
						.map(S3TripMedia::getS3Key)
						.collect(Collectors.toSet());

				// DTO에 포함된 미디어 키와 기존 미디어 키 비교
				Set<String> newMediaS3Keys = new HashSet<>(locDto.getMediaS3Keys());

				// 1. 새로 추가된 미디어 (DTO에는 있지만 DB에는 없는 것)
				for (String s3Key : newMediaS3Keys) {
					if (!existingS3Keys.contains(s3Key)) {
						// 이 s3Key는 클라이언트에서 이미 S3에 업로드하고 DB에 저장된 상태라고 가정합니다.
						// (별도의 /api/media/upload 엔드포인트를 통해 이미 처리됨)
						// 여기서는 해당 S3TripMedia 엔티티를 찾아서 Location과의 연관 관계를 맺어줍니다.
						// findByS3Key로 찾아서 tripId, dayNumber, locationNumber 업데이트
						S3TripMedia mediaEntry = s3TripMediaRepository.findByS3Key(s3Key)
								.orElseThrow(() -> new RuntimeException("Media entry not found for S3 key: " + s3Key));

						// 이미 업로드 시점에 tripId, dayNumber, locationNumber가 정확히 설정되었다면
						// 이 부분은 유효성 검사로 사용할 수 있습니다.
						if (!mediaEntry.getTripId().equals(tripUid) ||
								!mediaEntry.getDayNumber().equals(dayDto.getNumber()) ||
								!mediaEntry.getLocationNumber().equals(locDto.getNumber())) {
							// 기존 매핑이 다르다면 업데이트
							mediaEntry.setTripId(tripUid);
							mediaEntry.setDayNumber(dayDto.getNumber());
							mediaEntry.setLocationNumber(locDto.getNumber());
							s3TripMediaRepository.save(mediaEntry);
						}
						mediaIdsToKeep.add(mediaEntry.getId());
					} else {
						// 이미 존재하는 미디어는 유지될 목록에 추가
						existingMedia.stream()
								.filter(m -> m.getS3Key().equals(s3Key))
								.findFirst()
								.ifPresent(m -> mediaIdsToKeep.add(m.getId()));
					}
				}
			}

			// 삭제된 Location 제거 (기존과 동일)
			day.getLocations().clear();
			day.getLocations().addAll(finalLocationsToSave);
			finalDaysToSave.add(day);
			existingDaysMap.remove(dayDto.getNumber());
		}

		// 삭제된 Day 제거 (기존과 동일)
		trip.getDays().clear();
		trip.getDays().addAll(finalDaysToSave);

		// --- S3TripMedia 테이블에서 더 이상 참조되지 않는 미디어 삭제 ---
		// 해당 Trip에 속하면서도 이번 업데이트에서 유지 목록에 없는 미디어들을 찾습니다.
		List<S3TripMedia> allTripMedia = s3TripMediaRepository.findByTripId(tripUid);
		List<S3TripMedia> mediaToDelete = allTripMedia.stream()
				.filter(media -> !mediaIdsToKeep.contains(media.getId()))
				.collect(Collectors.toList());

		for (S3TripMedia media : mediaToDelete) {
			// S3에서 실제 파일 삭제 (S3UploadService에 deleteFileByS3Key 메서드 추가)
			// s3UploadService.deleteFileByS3Key(media.getS3Key());
			// DB에서 메타데이터 삭제
			s3TripMediaRepository.delete(media);
		}
		// -------------------------------------------------------------

		// 사용자 통계 업데이트 (isCompleted 로직 재확인 필요)
		if (trip.isCompleted()) { // 최종 `completed` 상태에 따라 저장
			userRepository.save(user);
		}
		Trip savedTrip = tripRepository.save(trip); // Trip 저장

		return tripMapper.toDto(savedTrip, user);
	}
